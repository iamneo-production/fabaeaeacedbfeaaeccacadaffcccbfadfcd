{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass CurrconvPipe {\n  constructor() {\n    this.resValue = 0;\n    this.usd = {\n      \"id\": \"USD\",\n      \"value\": 1.126735\n    };\n    this.gbp = {\n      \"id\": \"GBP\",\n      \"value\": 0.876893\n    };\n    this.inr = {\n      \"id\": \"INR\",\n      \"value\": 79.677056\n    };\n  }\n  transform(fromCurrency, toCurrency, amount) {\n    if (fromCurrency == toCurrency) {\n      return amount;\n    }\n    if (fromCurrency == this.usd.id) {\n      if (toCurrency == this.gbp.id) {\n        this.resValue = amount / this.usd.value * this.gbp.value;\n        this.resValue = Math.round(this.resValue);\n        return this.resValue;\n      }\n      if (toCurrency == this.inr.id) {\n        this.resValue = amount / this.usd.value * this.inr.value;\n        this.resValue = Math.round(this.resValue);\n        return this.resValue;\n      }\n    }\n    if (fromCurrency == this.gbp.id) {\n      if (toCurrency == this.usd.id) {\n        this.resValue = amount / this.gbp.value * this.usd.value;\n        this.resValue = Math.round(this.resValue);\n        return this.resValue;\n      }\n      if (toCurrency == this.inr.id) {\n        this.resValue = amount / this.gbp.value * this.inr.value;\n        this.resValue = Math.round(this.resValue);\n        return this.resValue;\n      }\n    }\n    if (fromCurrency == this.inr.id) {\n      if (toCurrency == this.usd.id) {\n        this.resValue = amount / this.inr.value * this.usd.value;\n        this.resValue = Math.round(this.resValue);\n        return this.resValue;\n      }\n      if (toCurrency == this.gbp.id) {\n        this.resValue = amount / this.inr.value * this.gbp.value;\n        this.resValue = Math.round(this.resValue);\n        return this.resValue;\n      }\n    }\n  }\n}\nCurrconvPipe.ɵfac = function CurrconvPipe_Factory(t) {\n  return new (t || CurrconvPipe)();\n};\nCurrconvPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"currencypipe\",\n  type: CurrconvPipe,\n  pure: true\n});\nexport { CurrconvPipe };","map":{"version":3,"names":["CurrconvPipe","constructor","resValue","usd","gbp","inr","transform","fromCurrency","toCurrency","amount","id","value","Math","round","pure"],"sources":["/home/coder/project/workspace/angularapp/src/app/currencypipe.ts"],"sourcesContent":["import { Pipe,PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'currencypipe'\n})\nexport class CurrconvPipe implements PipeTransform{\n    resValue=0;\n    usd =  { \"id\":\"USD\", \"value\": 1.126735};\n    gbp=  { \"id\":\"GBP\", \"value\":0.876893};\n    inr=  { \"id\":\"INR\", \"value\":79.677056};\n    transform(fromCurrency: any, toCurrency: any, amount:any ) {\n        if(fromCurrency==toCurrency){\n            return amount;\n        }\n        if(fromCurrency==this.usd.id){\n            if(toCurrency==this.gbp.id){\n              this.resValue = (amount/this.usd.value)*this.gbp.value;\n              this.resValue = Math.round(this.resValue);\n              return this.resValue;\n            }\n            if(toCurrency==this.inr.id){\n                this.resValue= (amount/this.usd.value)*this.inr.value;\n                this.resValue = Math.round(this.resValue);\n                return this.resValue;\n            }\n        }\n        if(fromCurrency==this.gbp.id){\n            if(toCurrency==this.usd.id){\n                this.resValue= (amount/this.gbp.value)*this.usd.value;\n                this.resValue = Math.round(this.resValue);\n                return this.resValue;\n            }\n            if(toCurrency==this.inr.id){\n                this.resValue= (amount/this.gbp.value)*this.inr.value;\n                this.resValue = Math.round(this.resValue);\n                return this.resValue;\n            }\n        }\n        if(fromCurrency==this.inr.id){\n            if(toCurrency==this.usd.id){\n                this.resValue= (amount/this.inr.value)*this.usd.value;\n                this.resValue=Math.round(this.resValue);\n                return this.resValue;\n            }\n            if(toCurrency==this.gbp.id){\n                this.resValue= (amount/this.inr.value)*this.gbp.value;\n                this.resValue = Math.round(this.resValue);\n                return this.resValue;\n            }\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}